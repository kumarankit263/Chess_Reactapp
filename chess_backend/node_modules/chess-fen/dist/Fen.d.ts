import { Position } from "./Position";
import { BoardContent, CastlingRights, Color, PositionOrCoordinate } from "./types";
export interface FenArgs {
    board: BoardContent[][];
    toMove: Color;
    castlingRights: CastlingRights;
    enPassantSquare: string;
    halfMoves: number;
    fullMoves: number;
}
export declare class Fen {
    static readonly startingPosition = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
    static readonly emptyPosition = "8/8/8/8/8/8/8/8 w KQkq - 0 1";
    readonly rows: number;
    readonly columns: number;
    readonly board: BoardContent[][];
    readonly toMove: Color;
    readonly castlingRights: CastlingRights;
    readonly enPassantSquare: string;
    readonly halfMoves: number;
    readonly fullMoves: number;
    constructor(fenOrFenArgs?: string | FenArgs);
    static from(fen: Fen): Fen;
    cloneWith(partialFenArgs?: Partial<FenArgs>): Fen;
    isOccupied(positionOrCoordinate: PositionOrCoordinate): boolean;
    isEmpty(positionOrCoordinate: PositionOrCoordinate): boolean;
    get(positionOrCoordinate: Position | string): BoardContent | null;
    update(positionOrCoordinate: PositionOrCoordinate, boardContent: BoardContent): Fen;
    clear(positionOrCoordinate: string | Position): Fen;
    toString(): string;
    printBoard(): void;
    private unparseBoard;
    private unparseToMove;
    private unparseCastlingRights;
    private unparseEnPassantSquare;
    private unparseHalfMoves;
    private unparseFullMoves;
}
export default Fen;
