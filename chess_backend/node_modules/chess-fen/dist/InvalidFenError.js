"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidFenError = void 0;
var InvalidFenError = /** @class */ (function (_super) {
    __extends(InvalidFenError, _super);
    function InvalidFenError(message) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, message) || this;
        Object.defineProperty(_this, "name", {
            value: _newTarget.name,
            enumerable: false,
            configurable: true,
        });
        fixProto(_this, _newTarget.prototype);
        fixStack(_this);
        return _this;
    }
    InvalidFenError.invalidNumberOfFields = function () {
        return new InvalidFenError("The fen must contain six fields seperated by a single space");
    };
    InvalidFenError.invalidMoveNumber = function () {
        return new InvalidFenError("The move number must be a positive integer");
    };
    InvalidFenError.invalidHalfMoveNumber = function () {
        return new InvalidFenError("The half move number must be a positive integer");
    };
    InvalidFenError.invalidEnPassantSquare = function () {
        return new InvalidFenError("The enpassant square must be a coordinate on the third of sixth rank");
    };
    InvalidFenError.invalidCastlingAvailability = function () {
        return new InvalidFenError("The castling availability is invalid");
    };
    InvalidFenError.invalidToMove = function () {
        return new InvalidFenError("The side to move must be either w or b");
    };
    return InvalidFenError;
}(Error));
exports.InvalidFenError = InvalidFenError;
function fixProto(target, prototype) {
    var setPrototypeOf = Object.setPrototypeOf;
    setPrototypeOf
        ? setPrototypeOf(target, prototype)
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
            (target.__proto__ = prototype);
}
function fixStack(target, fn) {
    if (fn === void 0) { fn = target.constructor; }
    // eslint-disable-next-line @typescript-eslint/ban-types
    var captureStackTrace = Error.captureStackTrace;
    captureStackTrace && captureStackTrace(target, fn);
}
