"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fen = void 0;
var Position_1 = require("./Position");
var types_1 = require("./types");
var parse_1 = require("./parse");
var Fen = exports.Fen = /** @class */ (function () {
    function Fen(fenOrFenArgs) {
        if (fenOrFenArgs === void 0) { fenOrFenArgs = Fen.startingPosition; }
        var fenArgs = typeof fenOrFenArgs === "string" ? (0, parse_1.parseFenString)(fenOrFenArgs) : fenOrFenArgs;
        this.board = fenArgs.board;
        this.toMove = fenArgs.toMove;
        this.castlingRights = fenArgs.castlingRights;
        this.enPassantSquare = fenArgs.enPassantSquare;
        this.halfMoves = fenArgs.halfMoves;
        this.fullMoves = fenArgs.fullMoves;
        this.rows = this.board.length;
        this.columns = this.board[0].length;
    }
    Fen.from = function (fen) {
        return new Fen(fen.toString());
    };
    Fen.prototype.cloneWith = function (partialFenArgs) {
        return new Fen(__assign({ board: this.board, toMove: this.toMove, castlingRights: this.castlingRights, enPassantSquare: this.enPassantSquare, halfMoves: this.halfMoves, fullMoves: this.fullMoves }, partialFenArgs));
    };
    Fen.prototype.isOccupied = function (positionOrCoordinate) {
        return !this.isEmpty(positionOrCoordinate);
    };
    Fen.prototype.isEmpty = function (positionOrCoordinate) {
        var positionContent = this.get(positionOrCoordinate);
        return positionContent === null || positionContent === types_1.EMPTY_SQUARE;
    };
    Fen.prototype.get = function (positionOrCoordinate) {
        var position = Position_1.Position.fromPositionOrCoordinate(positionOrCoordinate);
        var column = this.board[position.y];
        return column ? column[position.x] : null;
    };
    Fen.prototype.update = function (positionOrCoordinate, boardContent) {
        var position = Position_1.Position.fromPositionOrCoordinate(positionOrCoordinate);
        return this.cloneWith({
            board: this.board.map(function (row, y) {
                if (y === position.y) {
                    return row.map(function (placement, x) { return (x === position.x ? boardContent : placement); });
                }
                return y === position.y
                    ? row.map(function (placement, x) { return (x === position.x ? boardContent : placement); })
                    : row;
            }),
        });
    };
    Fen.prototype.clear = function (positionOrCoordinate) {
        return this.update(positionOrCoordinate, types_1.EMPTY_SQUARE);
    };
    Fen.prototype.toString = function () {
        return [
            this.unparseBoard(),
            this.unparseToMove(),
            this.unparseCastlingRights(),
            this.unparseEnPassantSquare(),
            this.unparseHalfMoves(),
            this.unparseFullMoves(),
        ].join(" ");
    };
    Fen.prototype.printBoard = function () {
        var edge = Array(this.rows + 2)
            .fill("-")
            .join("-");
        var boardString = this.board
            .map(function (row) {
            return "| " +
                row
                    .map(function (boardContent) { return (boardContent === types_1.EMPTY_SQUARE ? "." : boardContent.toString()); })
                    .join(" ") +
                " |";
        })
            .join("\n");
        console.log(edge + "\n" + boardString + "\n" + edge);
    };
    Fen.prototype.unparseBoard = function () {
        return this.board
            .map(function (pieces) {
            var field = [];
            var emptySquares = 0;
            pieces.forEach(function (piece) {
                if (piece === types_1.EMPTY_SQUARE) {
                    emptySquares++;
                }
                else {
                    if (emptySquares > 0) {
                        field.push(emptySquares);
                        field.push(piece);
                        emptySquares = 0;
                    }
                    else {
                        field.push(piece);
                    }
                }
            });
            if (emptySquares > 0) {
                field.push(emptySquares);
            }
            return field.reduce(function (strings, string) { return strings + string; });
        })
            .join("/");
    };
    Fen.prototype.unparseToMove = function () {
        return this.toMove === "white" ? "w" : "b";
    };
    Fen.prototype.unparseCastlingRights = function () {
        var castlingRights = this.castlingRights;
        var fenCastlingRights = castlingRights.white.kingside ? "K" : "";
        fenCastlingRights += castlingRights.white.queenside ? "Q" : "";
        fenCastlingRights += castlingRights.black.kingside ? "k" : "";
        fenCastlingRights += castlingRights.black.queenside ? "q" : "";
        return fenCastlingRights ? fenCastlingRights : "-";
    };
    Fen.prototype.unparseEnPassantSquare = function () {
        return this.enPassantSquare;
    };
    Fen.prototype.unparseHalfMoves = function () {
        return this.halfMoves.toString();
    };
    Fen.prototype.unparseFullMoves = function () {
        return this.fullMoves.toString();
    };
    Fen.startingPosition = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
    Fen.emptyPosition = "8/8/8/8/8/8/8/8 w KQkq - 0 1";
    return Fen;
}());
exports.default = Fen;
