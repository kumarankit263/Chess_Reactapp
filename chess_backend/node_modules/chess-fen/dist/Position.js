"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Position = void 0;
var defaultNumberOfRows = 8;
var Position = /** @class */ (function () {
    function Position(x, y, rows) {
        if (rows === void 0) { rows = defaultNumberOfRows; }
        this.x = x;
        this.y = y;
        this.rows = rows;
    }
    Position.from = function (_a, rows) {
        var x = _a.x, y = _a.y;
        if (rows === void 0) { rows = defaultNumberOfRows; }
        return new Position(x, y, rows);
    };
    Position.fromCoordinate = function (coordinate, rows) {
        if (rows === void 0) { rows = defaultNumberOfRows; }
        var row = parseInt(coordinate.substring(1, coordinate.length), 10);
        return new Position(coordinate.charAt(0).charCodeAt(0) - 97, row > rows ? row : Math.abs(row - rows), rows);
    };
    Position.fromPositionOrCoordinate = function (positionOrCoordinate, rows) {
        if (rows === void 0) { rows = defaultNumberOfRows; }
        return typeof positionOrCoordinate === "string"
            ? Position.fromCoordinate(positionOrCoordinate, rows)
            : Position.from({ x: positionOrCoordinate.x, y: positionOrCoordinate.y }, rows);
    };
    Position.prototype.rotate = function (rotate) {
        if (rotate === void 0) { rotate = true; }
        if (!rotate) {
            return this;
        }
        var rotatedX = Math.abs(this.x - (this.rows - 1));
        var rotatedY = Math.abs(this.y - (this.rows - 1));
        return new Position(rotatedX, rotatedY);
    };
    Position.prototype.toCoordinate = function () {
        return String.fromCharCode(this.x + 97) + Math.abs(this.y - this.rows);
    };
    Position.prototype.toGridPosition = function (tileSize) {
        var x = Math.round(this.x / tileSize);
        var y = Math.round(this.y / tileSize);
        return new Position(x, y);
    };
    Position.prototype.increaseBy = function (position) {
        var x = this.x + position.x;
        var y = this.y + position.y;
        return new Position(x, y);
    };
    Position.prototype.isKnightMoveTo = function (position) {
        return (!this.isDiagonalTo(position) &&
            !this.isVerticalTo(position) &&
            !this.isHorizontalTo(position) &&
            this.isWithinRange(position, 2));
    };
    Position.prototype.isWithinRange = function (position, range) {
        if (range === void 0) { range = 1; }
        var deltaY = Math.abs(position.y - this.y);
        var deltaX = Math.abs(position.x - this.x);
        return deltaX <= range && deltaY <= range;
    };
    Position.prototype.isAdjacentTo = function (position, range) {
        if (range === void 0) { range = 1; }
        for (var x = 0; x < this.rows; x++) {
            for (var y = 0; y < this.rows; y++) {
                var thePosition = new Position(x, y);
                var xIsInRange = x <= this.x + range && x >= this.x - range;
                var yIsInRange = y <= this.y + range && y >= this.y - range;
                if (xIsInRange && yIsInRange && thePosition.equals(position) && !thePosition.equals(this)) {
                    return true;
                }
            }
        }
        return false;
    };
    Position.prototype.isDiagonalTo = function (position, maxSpaces) {
        if (maxSpaces === void 0) { maxSpaces = Infinity; }
        var deltaY = Math.abs(position.y - this.y);
        var deltaX = Math.abs(position.x - this.x);
        return deltaY === deltaX && deltaX <= maxSpaces;
    };
    Position.prototype.isVerticalTo = function (position, maxSpaces) {
        if (maxSpaces === void 0) { maxSpaces = Infinity; }
        var deltaY = Math.abs(position.y - this.y);
        return this.x === position.x && deltaY <= maxSpaces;
    };
    Position.prototype.isHorizontalTo = function (position, maxSpaces) {
        if (maxSpaces === void 0) { maxSpaces = Infinity; }
        var deltaX = Math.abs(position.x - this.x);
        return this.y === position.y && deltaX <= maxSpaces;
    };
    Position.prototype.isNorthTo = function (position, range) {
        if (range === void 0) { range = 0; }
        if (range) {
            return this.y === position.y + range;
        }
        return this.y > position.y;
    };
    Position.prototype.isSouthTo = function (position, range) {
        if (range === void 0) { range = 0; }
        if (range) {
            return this.y === position.y - range;
        }
        return this.y < position.y;
    };
    Position.prototype.isWestTo = function (position, range) {
        if (range === void 0) { range = 0; }
        if (range) {
            return this.x === position.x + range;
        }
        return this.x > position.x;
    };
    Position.prototype.isEastTo = function (position, range) {
        if (range === void 0) { range = 0; }
        if (range) {
            return this.x === position.x - range;
        }
        return this.x < position.x;
    };
    Position.prototype.toString = function () {
        return this.toCoordinate();
    };
    Position.prototype.equals = function (position) {
        return this.x === position.x && this.y === position.y;
    };
    return Position;
}());
exports.Position = Position;
exports.default = Position;
